{"title":"Sfdy","publishedDate":"2021-01-01T00:00:00.000Z","abstract":"sfdy is a command line tool to work with the Salesforce Metadata API. It has been built to work around strange behaviours and known limitations of the api, and to simplify the implementation of a continuous integration process","body":"<p>sfdy is a command line tool to work with the <a href=\"https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_intro.htm\">Salesforce Metadata API</a>.\nIt has been built to work around strange behaviours and known limitations of the api, and to simplify the implementation of a continuous integration process. It applies <a href=\"#apply-standard-patches-and-renderers-to-metadata\">useful patches</a> to avoid common problems when deploying metadata, and it exposes a simple interface to <a href=\"#build-your-own-plugins\">build your own plugins</a></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs&#x27;</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> zlib <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;zlib&#x27;</span>\n<span class=\"hljs-keyword\">import</span> parse <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;csv-parse&#x27;</span>\n<span class=\"hljs-keyword\">import</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highland&#x27;</span>\n<span class=\"hljs-keyword\">import</span> bent <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;bent&#x27;</span>\n<span class=\"hljs-keyword\">import</span> dotenv <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;dotenv&#x27;</span>\n\ndotenv.config()\n<span class=\"hljs-keyword\">const</span> GD_API_BASE_URL = <span class=\"hljs-string\">&#x27;https://www.googleapis.com/drive/v3&#x27;</span>\n<span class=\"hljs-keyword\">const</span> { GD_FILE_ID, GD_KEY } = process.env\n\n;(<span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> getStream = bent(GD_API_BASE_URL)\n  <span class=\"hljs-keyword\">const</span> gunzipper = zlib.createGunzip()\n  <span class=\"hljs-keyword\">const</span> csvParser = parse({ <span class=\"hljs-attr\">columns</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">delimiter</span>: <span class=\"hljs-string\">&#x27;,&#x27;</span> })\n  <span class=\"hljs-keyword\">const</span> writeStream = fs.createWriteStream(<span class=\"hljs-string\">&#x27;file.txt&#x27;</span>)\n\n  <span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-function\">(<span class=\"hljs-params\">count = <span class=\"hljs-number\">0</span>, everyN = <span class=\"hljs-number\">10000</span></span>) =&gt;</span> <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (++count % everyN === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Processed <span class=\"hljs-subst\">${count}</span> items`</span>)\n      <span class=\"hljs-built_in\">console</span>.timeLog(<span class=\"hljs-string\">&#x27;Processing time&#x27;</span>)\n    }\n  }\n\n  <span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&#x27;Processing time&#x27;</span>)\n\n  <span class=\"hljs-keyword\">const</span> filePath = <span class=\"hljs-string\">`/files/<span class=\"hljs-subst\">${GD_FILE_ID}</span>?alt=media&amp;key=<span class=\"hljs-subst\">${GD_KEY}</span>`</span>\n  _(<span class=\"hljs-keyword\">await</span> getStream(filePath))\n    .through(gunzipper)\n    .through(csvParser)\n    .tap(counter(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">250000</span>))\n    .map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> <span class=\"hljs-built_in\">JSON</span>.stringify(x) + <span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n    .pipe(writeStream)\n    .on(<span class=\"hljs-string\">&#x27;close&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&#x27;Processing time&#x27;</span>)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Done&#x27;</span>)\n    })\n})()\n</code></pre>\n"}